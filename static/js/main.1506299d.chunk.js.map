{"version":3,"sources":["components/card/card.js","components/card-list/card-list.js","components/searchbox/searchbox.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","console","log","id","className","src","m","alt","name","CardList","monsters","map","key","Searchbox","handleChange","type","onChange","placeholder","App","state","searchField","fetch","then","res","json","users","setState","this","filteredMonsters","filter","monster","toLowerCase","includes","e","target","value","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"uTAYeA,G,kBAVF,SAACC,GAEV,OADAC,QAAQC,IAAIF,EAAMG,IAEd,yBAAKC,UAAU,kBACX,yBAAKC,IAAG,+BAA0BL,EAAMM,EAAEH,GAAlC,aAAiDI,IAAI,YAC9D,4BAAKP,EAAMM,EAAEE,SCITC,EARA,SAACT,GAEZ,OACI,yBAAKI,UAAU,aACdJ,EAAMU,SAASC,KAAI,SAACL,GAAD,OAAK,kBAAC,EAAD,CAAMM,IAAKN,EAAEH,GAAIG,EAAGA,SCKtCO,G,MATG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKV,UAAU,UACf,2BAAOW,KAAK,OAAOC,SAAUF,EAC/BG,YAAY,gBAAgBb,UAAU,oBC2B7Bc,E,kDA5Bb,aAAc,IAAD,8BACX,gBACKC,MAAM,CACTT,SAAS,GACTU,YAAY,IAJH,E,gEAOO,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAG,OAAEA,EAAIC,UACdF,MAAK,SAAAG,GAAK,OAAE,EAAKC,SAAS,CAAChB,SAASe,S,+BAG9B,IAAD,SACuBE,KAAKR,MAA3BT,EADD,EACCA,SAASU,EADV,EACUA,YACVQ,EAAiBlB,EAASmB,QAAO,SAAAC,GAAO,OAAEA,EAAQtB,KAAKuB,cAAcC,SAASZ,EAAYW,kBAElG,OACE,yBAAK3B,UAAU,OACb,wBAAIA,UAAU,MAAd,YACD,kBAAC,EAAD,CAAWU,aAAc,SAAAmB,GAAC,OAAE,EAAKP,SAAS,CAACN,YAAYa,EAAEC,OAAOC,SAASA,MAAOf,IAC/E,kBAAC,EAAD,CAAUV,SAAUkB,S,GAtBRQ,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpD,QAAQoD,MAAMA,EAAMC,c","file":"static/js/main.1506299d.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.styles.css'\r\nconst Card = (props) => {\r\n    console.log(props.id)\r\n    return (\r\n        <div className=\"card-container\">\r\n            <img src={`https://robohash.org/${props.m.id}?set=set2`} alt=\"monster\"/>\r\n           <h1>{props.m.name}</h1> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card\r\n","import React from 'react'\r\nimport './card-list.style.css'\r\nimport Card from '../card/card'\r\nconst CardList=(props)=> {\r\n    //console.log(props)\r\n    return (\r\n        <div className=\"card-list\" >\r\n        {props.monsters.map((m)=><Card key={m.id} m={m}/>)}\r\n        </div>\r\n    )\r\n}\r\nexport default CardList","import React from 'react'\r\nimport './search-box.styles.css'\r\n\r\nconst Searchbox = ({handleChange}) => {\r\n    return (\r\n        <div className=\"search\">\r\n        <input type='text' onChange={handleChange} \r\n      placeholder=\"Search Robots\" className=\"search-input\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Searchbox\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport CardList from './components/card-list/card-list';\nimport Searchbox from './components/searchbox/searchbox';\n\nclass App extends Component {\n  constructor(){\n    super()\n    this.state={\n      monsters:[],\n      searchField:''\n  }\n  }\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(res=>res.json())\n    .then(users=>this.setState({monsters:users}))\n  }\n\n  render(){\n    const {monsters,searchField}=this.state\n    const filteredMonsters=monsters.filter(monster=>monster.name.toLowerCase().includes(searchField.toLowerCase()))\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"h1\">Robotish</h1>\n     <Searchbox handleChange={e=>this.setState({searchField:e.target.value})} value={searchField}/>\n      <CardList monsters={filteredMonsters}/>\n   \n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}